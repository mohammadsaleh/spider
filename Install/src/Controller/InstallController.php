<?php
namespace Install\Controller;

use Install\Controller\AppController;
use Cake\Controller\Controller;
use Cake\Core\Configure;
use Install\Lib\InstallManager;
use Cake\Datasource\ConnectionManager;
use Cake\Core\Plugin;
use Cake\ORM\TableRegistry;
use Cake\Routing\Router;
/**
 * Install Controller
 *
 * @property \install\Model\Table\InstallTable $Install
 */
class InstallController extends AppController
{

    public function  initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->viewBuilder()->layout('install');
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $this->set('title_for_layout', __d('spider', 'Installation: Welcome'));

    }


    public function database()
    {
        $currentConfiguration = array(
            'exists' => false,
            'valid'  => false,
        );

        if (file_exists(APP . 'Config' . DS . 'database.php')) {
            $currentConfiguration['exists'] = true;
        }
        if ($currentConfiguration['exists']) {
            try {
//                $this->loadModel('Install.Install');
                $ds = $this->Install->get();
                $ds->cacheSources = false;
                $sources = $ds->listSources();
                $currentConfiguration['valid'] = true;
            } catch (Exception $e) {
            }
        }

        if (!empty($this->request->data)) {
            $InstallManager = new InstallManager();
            $result = $InstallManager->createDatabaseFile(array(
                'Install' => $this->request->data,
            ));
            if ($result !== true) {
                $this->Flash->warning($result);
            } else {
                return $this->redirect(array('action' => 'data'));
            }
        }
        $this->set(compact('currentConfiguration'));
        $this->set('title_for_layout', __d('spider', 'Installation: Database'));
    }

    public function data()
    {
        
        $this->_check();
        $this->set('title_for_layout', __d('spider', 'Step 2: Build database'));

        $ds = ConnectionManager::get('default');
        $config = $ds->config();
        $database = $config['database'];
        $tables = $ds->schemaCollection()->listTables();
        

        if (!empty($tables)) {
            $this->Flash->warning(
                __d('spider', 'Warning: Database "%s" is not empty.', $database),
                'default', array('class' => 'error')
            );
        }

        if ($this->request->query('run')) {
            set_time_limit(10 * MINUTE);
            $this->Install->setupDatabase();

//            $InstallManager = new InstallManager();
//            $result = $InstallManager->createCroogoFile();
//            if ($result !== true) {
//                return $this->Session->setFlash($result, 'flash', array('class' => 'error'));
//            }

            return $this->redirect(array('action' => 'adminuser'));
        }
    }

    
    public function adminuser(){
        $this->set('title_for_layout', __d('spider', 'Step 3: Set Admin User'));

        if ($this->request->is('post')) {
            if (!Plugin::loaded('Users')) {
                Plugin::load('Users');
            }
//            $this->loadModel('Users.User');
//            $this->set($this->request->data);
//
//            $user = $this->User->newEntity($this->request->data);
//            $user = $user->save();



            $users = TableRegistry::get('Users');
            $user = $users->newEntity($this->request->data,['validate' => true]);
            if ($users->save($user)) {
             return $this->redirect(['action'=>'finish']);   
            }
            
            
            if ($this->User->validates()) {
                $user = $this->Install->addAdminUser($this->request->data);
                if ($user) {
                    $this->Session->write('Install.user', $user);
                    return $this->redirect(['action' => 'finish']);
                }
            }
        }
        
        
    }
    
    
    public function finish(){
        $this->set('title_for_layout','finished');
        $urlBlogAdd = Router::url(array(
            'plugin' => 'nodes',
            'admin' => true,
            'controller' => 'nodes',
            'action' => 'add',
            'blog',
        ));
        $urlSettings = Router::url(array(
            'plugin' => 'settings',
            'admin' => true,
            'controller' => 'settings',
            'action' => 'prefix',
            'Site',
        ));
        
    }
    
    
    
    /**
     * If settings.json exists, app is already installed
     *
     * @return void
     */
    protected function _check()
    {
        if (Configure::read('Spider.installed')) {
            $this->Flash->success('Already Installed');
            return $this->redirect('/');
        }
    }


}
